#!/usr/bin/env python3

import logging
from datetime import datetime
from os import mkdir, path, remove
from pathlib import Path
from smtplib import SMTP

'''
<THIS IS THE SCRIPT DESCRIPTION>
'''

##########################
### CHECK & EDIT BELOW ###
##########################

###################
### COMMON DATA ###

### SCRIPT APPNAME(FOR SEND MAIL FUNCTION & ETC)
appname = 'YOUR_PROJECT_NAME'

### WORKING DIR
'''
By default script uses script's location dir.
If you need custom path for script data, 
set custom_script_data_path = 'yes'
'''
custom_script_data_path = 'no'
if custom_script_data_path == 'yes':
    script_data = '<your-absolute-path>'
else:
    script_data = 'script_data'

### LOGS FORMAT
logging_format='%(asctime)s - %(levelname)s - %(message)s'
logging_datefmt = '%d-%b-%Y %H:%M:%S'

### LOGS TO KEEP AFTER ROTATION
logs_to_keep = 30

### LOGS LOCATION
'''
By default script uses script's location dir.
If you need custom path for logs, 
set custom_logs_path = 'yes'
'''
custom_logs_path = 'no'
if custom_logs_path == 'yes':
    logs_dir = f'/var/{appname}/logs'
else:
    logs_dir = 'logs'

### SMTP DATA(WITHOUT AUTH); NO BY DEFAULT ###
send_mail_option = 'no'
smtp_server = '<YOUR-SMTP-SERVER>'
from_addr = appname+'@EX.COM'
to_addr_list = ['ADMIN@EX.COM']
smtp_port = 25

####################
### PROJECT DATA ###

'''
Section for project va data
'''

################################
### NO NEED TO EDIT FURTHER! ###
################################

#######################
### LOGGING SECTION ###

### SET TIME TO
start_time = datetime.now()
start_date = start_time.strftime('%d-%m-%Y')

### CHECK LOGS DIR EXIST/CREATE
if not path.isdir(logs_dir):
    mkdir(logs_dir)

### DEFINE LOG NAME
app_log_name = f'{logs_dir}/{appname}_{str(start_date)}.log'

### DEFINE LOGGING SETTINGS
logging.basicConfig(filename=app_log_name, filemode='a', level=logging.INFO,
                    format=logging_format, datefmt=logging_datefmt)

### SCRIPT START ALERT
logging.info(f'SCRIPT WORK STARTED: {appname}')
logging.info('Script Starting Date&Time is: ' + str(start_date))

############################
##### HELPER FUNCTIONS #####

### FILES ROTATION (LOGS/OTHER)
def files_rotate(path_to_rotate, num_of_files_to_keep):
    '''
    This function is for log rotation.
    ARGS:
        path_to_rotate: absolute PATH of logs location
        num_of_files_to_keep: number of LOGS to keep
            delete rest
    '''
    count_files_to_keep = 1
    basepath = sorted(Path(path_to_rotate).iterdir(), key=path.getctime, reverse=True)
    for entry in basepath:
        if count_files_to_keep > num_of_files_to_keep:
            remove(entry)
            logging.info(f'removed file was: {entry}')
        count_files_to_keep += 1

### ESTIMATED TIME
def files_rotate_n_count_estimated_time():
    '''
    This function is for post-work procedures:
    1) Logs rotation
    2) Count script estimated time

    Takes no ARGS.
    '''
    logging.info('START: script post jobs')
    try:
        logging.info('START: log rotation...')
        files_rotate(logs_dir, logs_to_keep)
        logging.info('DONE: log rotation\n')    
    except Exception as error:
        logging.exception('ERROR: FAILURE to rotate logs')
    
    logging.info('DONE: script post jobs')
    end_time = datetime.now()
    logging.info('Estimated time is: ' + str(end_time - start_time))
    logging.info('######################\n')

### EMAIL REPORT ###
'''
To send email report at.
By default, at the end of the script only.
'''
def send_mail_report():
    if send_mail_option == 'yes':
        logging.info('START: sending error report')
        subj = appname+' Script Error Occured'
        with open(app_log_name, 'r') as log:
            msg = log.read()
        try:
            with SMTP(smtp_server, smtp_port) as send_mail:
                send_mail.ehlo()
                send_mail.sendmail(from_addr=from_addr, to_addrs=to_addr_list, msg=f'subject: {subj}({start_date})\n\n{start_date}:\n{msg}')
                send_mail.quit()
                logging.info('DONE: sending error report\n')
        except Exception as e:
            logging.warning('FAILED: sending error report, moving on...\n')
    else:
        logging.warning('Email report was not set, skipping')

#####################
### MAIN WORKFLOW ###

############################
### POST-WORK PROCEDURES ###

### FINISH
logging.info('#########################')
logging.info('DONE: Script job done!\n') 
files_rotate_n_count_estimated_time()
send_mail_report()
exit()
