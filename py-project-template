#!/usr/bin/env python3

import logging
from datetime import datetime
from os import mkdir, path, remove
from pathlib import Path
from smtplib import SMTP
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

'''
<THIS IS THE SCRIPT DESCRIPTION>
'''

##########################
### CHECK & EDIT BELOW ###
##########################

###################
### COMMON DATA ###

### SCRIPT APPNAME(FOR SEND MAIL FUNCTION, LOGNAME, ETC)
appname = 'YOUR_PROJECT_NAME'

### WORKING DIR
'''
By default script uses script's location dir.
If you need custom path for script(sensitive) data, 
set custom_script_data_path = 'yes'
'''
custom_script_data_path = 'no'
if custom_script_data_path == 'yes':
    script_data = '<YOUR ABS PATH>'
else:
    script_data = 'script_data'

### LOGS FORMAT
'''
logging_format: is for string of log representation
logging_datefmt: is for representation of %(asctime) param
'''
logging_format='%(asctime)s - %(levelname)s - %(message)s'
logging_datefmt = '%d-%b-%Y %H:%M:%S'

### LOG FILEMODE
'''
a - for "append" to the end of file
w - create new/rewrite exist
'''
log_filemode = 'w'

### LOGS TO KEEP AFTER ROTATION
logs_to_keep = 30

### LOGS LOCATION
'''
By default script uses script's location dir.
If you need custom path for logs, 
set custom_logs_path = 'yes'
'''
custom_logs_path_option = 'no'
'''
custom logs path example(with your appname in it): 
custom_logs_path =  f'/var/logs/{appname}'
'''
custom_logs_path = '<YOUR ABS PATH FOR SCRIPTS LOGS>'

if custom_logs_path_option == 'yes':
    logs_dir = custom_logs_path
else:
    logs_dir = 'logs'

### SMTP DATA(WITHOUT AUTH); NO BY DEFAULT ###
send_mail_option = 'no'
smtp_server = '<YOUR-SMTP-SERVER>'
from_addr = appname+'@EX.COM'
to_addr_list_users = ['USER@EX.COM']
to_addr_list_admins = ['ADMIN@EX.COM']
smtp_port = 25

####################
### PROJECT DATA ###
'''
Section for project's vars
'''

################################
### NO NEED TO EDIT FURTHER! ###
################################

#######################
### LOGGING SECTION ###

### SET TIME TO
start_date_n_time = datetime.now()
start_date = start_date_n_time.strftime('%d-%m-%Y')

### CHECK LOGS/DATA DIR EXIST/CREATE
if not path.isdir(logs_dir):
    mkdir(logs_dir)
if not path.isdir(script_data):
    mkdir(script_data)

### DEFINE LOG NAME
app_log_name = f'{logs_dir}/{appname}_{str(start_date)}.log'

### DEFINE LOGGING SETTINGS
logging.basicConfig(filename=app_log_name, filemode=log_filemode, level=logging.INFO,
                    format=logging_format, datefmt=logging_datefmt)

############################
##### HELPER FUNCTIONS #####

### FILES ROTATION (LOGS/OTHER)
def files_rotate(path_to_rotate, num_of_files_to_keep):
    '''
    This function is for log rotation.
    ARGS:
        path_to_rotate: absolute PATH of logs location
        num_of_files_to_keep: number of LOGS to keep
            delete rest
    '''
    logging.info('STARTED: log rotation...')
    try:
        count_files_to_keep = 1
        basepath = sorted(Path(path_to_rotate).iterdir(), key=path.getctime, reverse=True)
        for entry in basepath:
            if count_files_to_keep > num_of_files_to_keep:
                remove(entry)
                logging.info(f'removed file was: {entry}')
            count_files_to_keep += 1
    except Exception:
        logging.exception('FAILED: FAILURE to rotate logs')
    else:
        logging.info('SUCCEEDED: log rotation\n')    

### ESTIMATED TIME
def count_estimated_time(start_time):
    '''
    This function is for count script estimated time
    '''
    end_time = datetime.now()
    logging.info('Estimated time is: ' + str(end_time - start_time))

### EMAIL REPORT ###
'''
To send email report at.
By default, at the end of the script only.
'''
def send_mail_report(type):
    message = MIMEMultipart()
    message["From"] = from_addr

    if send_mail_option == 'yes':
        if type == 'error':
            logging.info('STARTED: sending email error report')
            message["Subject"] = f'appname - Script Error({start_date})'
            message["To"] = ', '.join(to_addr_list_admins)
            rcpt_to = to_addr_list_admins
        elif type == 'report':
            logging.info('STARTED: sending email final report')
            message["Subject"] = f'appname - Script Report({start_date})'
            message["To"] = ', '.join(to_addr_list_users)
            rcpt_to = to_addr_list_users
        
        with open(app_log_name, 'r') as log:
                report = log.read()
                message.attach(MIMEText(report, "plain"))
        try:
            with SMTP(smtp_server, smtp_port) as send_mail:
                data = message.as_string()
                send_mail.ehlo()
                send_mail.sendmail(from_addr, rcpt_to, data)
                send_mail.quit()
                if type == 'error':
                    logging.info('SUCCEEDED: sending email error report\n')
                else:
                    logging.info('SUCCEEDED: sending email final report\n')
        except Exception as e:
            if type == 'error':
                logging.exception('FAILED: sending email error report, moving on...\n')
            else:
                logging.exception('FAILED: sending email final report, moving on...\n')

######################
### MAIN FUNCTIONS ###
######################        
'''
Section for your app's various functions
'''

#####################
### MAIN WORKFLOW ###

### SCRIPT STARTED ALERT
logging.info(f'SCRIPT WORK STARTEDED: {appname}')
logging.info(f'Script Starting Date&Time is: {str(start_date_n_time)}')
logging.info('----------------------------\n')

############################
### POST-WORK PROCEDURES ###

### FINISH JOBS
logging.info('#########################')
logging.info('SUCCEEDED: Script job done!') 

count_estimated_time(start_date_n_time)
files_rotate(logs_dir, logs_to_keep)

if send_mail_option == 'yes':
    send_mail_report('report')
